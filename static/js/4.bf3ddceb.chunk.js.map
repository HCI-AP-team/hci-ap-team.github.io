{"version":3,"sources":["pages/city/components/CityCard.tsx","pages/city/components/ChooseCity.tsx","pages/city/pages/City.tsx"],"names":["useStyles","makeStyles","root","minWidth","maxWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","CityCard","props","language","classes","Card","className","elevation","CardContent","Typography","color","gutterBottom","value","cityName","provinceShortName","cityEnglishName","variant","component","currentConfirmedCount","confirmedCount","suspectedCount","curedCount","deadCount","provinceName","provinceEnglishName","useStyle","theme","specailCard","position","transition","right","top","searchComponents","justifyContent","alignItems","paddingTop","autocomputeInputAndButton","ChooseCity","useState","openSnackBar","setOpenSnackBar","cityData","allCityArray","setAllCityArray","oneCity","setOneCity","inputRef","useRef","cardRef","useEffect","allCityArr","forEach","e","push","console","log","Button","onClick","current","setAttribute","randomCity","Math","floor","length","random","setTimeout","style","marginRight","Autocomplete","id","freeSolo","width","size","options","groupBy","option","getOptionLabel","renderInput","params","TextField","label","chooseCityName","theCity","filter","ref","Snackbar","open","autoHideDuration","onClose","severity","height","cityCards","h1","textAlign","City","chinaData","setCityData","tempCityData","map","el","cities","index","val","ScrollReveal","reveal","duration","distance","opacity","reset","i","key"],"mappings":"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","file":"static/js/4.bf3ddceb.chunk.js","sourcesContent":["import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n    root: {\n        minWidth: 300,\n        maxWidth: 350\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n});\nfunction CityCard(props:any) {\n    const { language } = props;\n    const classes = useStyles();\n    return (\n        <Card className={classes.root} elevation={5}>\n            <CardContent>\n                <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                {(language?'城市名称: '+(props.value.cityName?props.value.cityName:props.value.provinceShortName):'city name: '+(props.value.cityEnglishName))}\n                {/* 没有城市名称属性就是特殊地区 */}\n                </Typography>\n                <Typography variant=\"body2\" component=\"p\">\n                    {(language?'当前确诊: ':'current confirmed count: ')+props.value.currentConfirmedCount}\n                </Typography>\n                <Typography variant=\"body2\" component=\"p\">\n                   {(language?' 累计确诊: ':'confirmed count: ')+props.value.confirmedCount}\n                </Typography>\n                <Typography variant=\"body2\" component=\"p\">\n                    {(language?'疑似人数: ':'suspencted count: ')+props.value.suspectedCount}\n                </Typography>\n                <Typography variant=\"body2\" component=\"p\">\n                    {(language?'治愈人数: ':'cured count: ')+props.value.curedCount}\n                </Typography>\n                <Typography variant=\"body2\" component=\"p\">\n                    {(language?'死亡人数: ':'dead count: ')+props.value.deadCount}\n                </Typography>\n                <Typography variant=\"body2\" component=\"p\">\n                    {(language?'所属省份: '+props.value.provinceName:'province: '+props.value.provinceEnglishName)}\n                </Typography>\n            </CardContent>\n            {/* <CardActions>\n                <Button size=\"small\" color=\"primary\" variant=\"contained\">{language?'进一步了解这个城市':'learn more about this city'}</Button>\n            </CardActions> */}\n        </Card>\n    )\n}\n\nexport default CityCard\n","import React, { useEffect, useState, useRef } from 'react'\nimport { Button, TextField } from '@material-ui/core'\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport CityCard from './CityCard'\nconst useStyle = makeStyles(theme => ({\n    specailCard: {\n        position: 'absolute',\n        transition: '1s all linear',\n        right: '65vw',\n        top: '30vh',\n    },\n    searchComponents: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'space-around',\n        paddingTop: '20px'\n    },\n    autocomputeInputAndButton: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'space-around'\n    }\n})\n)\nfunction ChooseCity(props: any) {\n\n    //TODO 将直辖市归位 市 ,同时处理没有情况的市\n    const classes = useStyle();\n    const [openSnackBar, setOpenSnackBar] = useState(false)\n    const { className, cityData, language } = props //父组件传过来的城市数据,需要进一步处理放入下面一行的状态中\n    const [allCityArray, setAllCityArray] = useState()//所有城市数据合并的数组\n    const [oneCity, setOneCity] = useState()//某一个城市的数据\n    const inputRef = useRef<HTMLInputElement>(null)//输入框\n    const cardRef = useRef<HTMLDivElement>(null)//那张需要特殊显示的卡\n    useEffect(() => {\n        //将所有城市的数据放在一个一维数组中便于查找\n        let allCityArr: any[] = []   //用于合并数据的临时变量\n\n        //将所有城市放在一个数组中\n        cityData ?\n            cityData.forEach((e: any) => { allCityArr.push(...e); })\n            :\n            console.log('empty cityData')\n\n        //将所有城市数据储存在状态中\n        allCityArr ?\n            setAllCityArray(allCityArr)\n            :\n            console.log('empty city data array');\n\n        // console.log(allCityArr)\n    }, [cityData, language])\n\n    //查询展示某个城市的数据\n    const searchCityData = () => {\n        let chooseCityName = inputRef.current?.value;\n        const theCity = allCityArray\n            .filter((value: any) => {\n                //如果是中文\n                if (language)\n                    return (\n                        value.cityName ? value.cityName : value.provinceShortName\n                    )\n                        === chooseCityName\n                else//如果是英文\n                    return (\n                        value.cityEnglishName ? value.cityEnglishName : value.provinceEnglishName\n                    )\n                        === chooseCityName\n            })[0];\n        //卡片动画, 如果选中了城市并且是第一次\n        if (theCity) {\n            cardRef?.current?.setAttribute('style',\n                `\n                right:15vw;\n                `)\n\n            setTimeout(() => {\n                //设置城市\n                setOneCity(\n                    theCity\n                )//获得当前选择的城市,没有城市姓名属性就是香港等特殊地区\n                cardRef?.current?.setAttribute('style',\n                    `\n                    right:65vw;\n                    `)\n            }, 1500)\n\n        }\n        else {\n            //打开提示框,告知用户输入有问题\n            setOpenSnackBar(true)\n        }\n    }\n\n\n    //随机展示一个城市的数据\n    const randomDisplay = () => {\n        //卡片动画\n        cardRef?.current?.setAttribute('style',\n            `\n                right:15vw;\n        `)\n        let randomCity = allCityArray[Math.floor(allCityArray.length * Math.random())]//随机抽取一个城市\n\n        setTimeout(() => {\n            //设置城市\n            setOneCity(randomCity);\n            cardRef?.current?.setAttribute('style',\n                `\n                    right:65vw\n                    `)\n        }, 1500)\n    }\n    return (\n        <div className={className}>\n            <div className={classes.searchComponents}>\n                <Button onClick={randomDisplay} color=\"primary\" variant=\"contained\" style={{ marginRight: '5vw' }}>{language ? '随便看一看' : 'random look'}</Button>\n                <div className={classes.autocomputeInputAndButton}>\n                    {\n                        allCityArray ?\n                            <Autocomplete\n                                id=\"free-solo-demo\"\n                                freeSolo\n                                //TODO 选项\n                                style={{ width: 300, marginRight: '10px' }}\n                                size='medium'\n                                options={allCityArray}\n                                groupBy={(option: any) => language ? option.provinceName : option.provinceEnglishName}\n                                getOptionLabel={\n                                    (option: any) =>\n                                        language ?\n                                            option.cityName\n                                            :\n                                            (option.cityEnglishName ? option.cityEnglishName : option.provinceEnglishName)\n                                }\n                                renderInput={params => (\n                                    <TextField {...params} inputRef={inputRef} label={language ? \"城市名称\" : 'city name'} margin=\"normal\" variant=\"outlined\" />\n                                )}\n                            />\n                            :\n                            ''}\n                    <Button color=\"secondary\" variant=\"contained\" onClick={searchCityData}>{language ? '查找指定城市' : 'Find a specified city'}</Button>\n                </div>\n            </div>\n            <div ref={cardRef} className={classes.specailCard}>\n                {\n                    oneCity ?\n                        <CityCard language={language} value={oneCity} />\n                        :\n                        <strong>\n                            {language ? '请选择一个城市查看' : 'Please choose a city'}\n                        </strong>\n                }\n            </div>\n            <Snackbar open={openSnackBar} autoHideDuration={6000} onClose={() => setOpenSnackBar(false)}>\n                <MuiAlert elevation={6} onClose={() => setOpenSnackBar(false)} severity=\"error\" variant=\"filled\">\n                    {language ? \"请输入正确的城市名称\" : \"Please input correct name of city\"}\n                </MuiAlert>\n            </Snackbar>\n        </div >\n    )\n}\n\nexport default ChooseCity\n","import React from 'react'\nimport { useState, useEffect } from 'react'\nimport ScrollReveal from 'scrollreveal'\nimport { makeStyles } from '@material-ui/core/styles';\n// import areaData from '../../../assets/areaData'\nimport ChooseCity from '../components/ChooseCity'\nimport CityCard from '../components/CityCard'\nconst useStyles = makeStyles({\n    root: {\n        width: '100vw',\n        height: '100vh',\n        position: 'relative',\n\n    },\n    cityCards: {\n        position: 'absolute',\n        right: '15vw',\n        top: '30vh',\n\n    },\n\n    h1: {\n        width: '100vw',\n        height: '8vh',\n        color: '#1d2228',//字体颜色\n        fontSize: '35px',\n        textAlign: 'center',\n        \n    }\n})\nfunction City(props: any) {\n    const { language, chinaData } = props;\n    const classes = useStyles();\n    const [cityData, setCityData] = useState()\n    //加载城市数据\n    useEffect(() => {\n        if (chinaData) {\n            //将省份信息添加到每一个市中\n            let tempCityData = chinaData\n                .map((el: any) => el.cities?.length ? el.cities : [el])//长度为0就是特殊地区如香港\n\n            //将添加省份信息后的城市数据放在状态中\n            setCityData(tempCityData\n                .map((value: any, index: number) => value\n                    .map((val: any) => {\n                        val.provinceName = chinaData[index].provinceName;\n                        val.provinceEnglishName = chinaData[index].provinceEnglishName;\n                        //给港澳台等地区设定一个城市名称\n                        if (!val.cityName) {\n                            val.cityName = val.provinceName\n                        }\n                        return val\n                    }))\n\n            )\n        }\n        ScrollReveal().reveal(\".CityMap\",\n            {\n                duration: 2000,\n                distance: '0px',\n                opacity: 0,\n                reset: true\n            })//入场动画\n\n    }, [chinaData])\n    useEffect(() => {\n        //重新渲染页面保证ChooseCity组件能够获得数据\n        // //console.log(cityData)\n    }, [cityData])\n    return (\n        <div className={classes.root + \" CityMap\"}>\n            <h1 className={classes.h1}>{language ? '城市概览' : 'Cities Overview'}</h1>\n            <ChooseCity language={language} cityData={cityData} />\n            {\n                cityData?.map((value: any, i: any) =>\n                    // 避免渲染过多导致页面卡顿\n                    i === 4 ?\n                        value?.map((value: any, id: any) =>\n                            id < 10 ?\n                                <div\n                                    className={classes.cityCards}\n                                    style={{\n                                        transform: `translate(-${2 * id}px,-${2 * id}px)`\n                                    }}\n                                    key={id}>\n                                    <CityCard language={language} value={value} />\n                                </div>\n                                :\n                                ''\n                        )\n                        :\n                        ''\n                )\n            }\n\n\n        </div>\n    )\n}\n\nexport default City\n"],"sourceRoot":""}